# https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
[tool.black]
line-length = 120
# Auto generated
force-exclude = "src/gen/.*\\.py$"

# https://github.com/hhatto/autopep8#usage
# https://github.com/hhatto/autopep8#more-advanced-usage
[tool.autopep8]
max_line_length = 120
recursive = true
aggressive = 3

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
typeCheckingMode = "strict"
# Extra strict
reportImplicitStringConcatenation="error"
reportCallInDefaultInitializer="error"
reportMissingSuperCall="none" # False positives on base classes
reportPropertyTypeMismatch="error"
reportUninitializedInstanceVariable="error"
reportUnnecessaryTypeIgnoreComment="error"
reportUnusedCallResult="none"
exclude = [
  # Auto generated
  "src/gen/",
  # We expect stub files to be incomplete or contain useless statements
  "typings/",
]
# Type stubs may not be completable
reportMissingTypeStubs = "warning"
# False positives with TYPE_CHECKING
reportImportCycles = "information"
# False positives with PyQt .connect. pylint(no-member) works instead
reportFunctionMemberAccess = "none"
# Extra runtime safety
reportUnnecessaryComparison = "warning"
# Flake8 does a better job
reportUnusedImport = "none"
# numpy has way too many complex types that triggers this
reportUnknownMemberType = "none"

# https://github.com/PyCQA/pylint/blob/main/examples/pylintrc
# https://pylint.pycqa.org/en/latest/technical_reference/features.html
[tool.pylint.REPORTS]
# Just like default but any error, warning or convention will make drop to 9 or less. refactor are worth more
evaluation = "10.0 - error - warning - convention - ((10 * refactor) / statement) * 10"
[tool.pylint.MASTER]
fail-under = 9.0
# https://pylint.pycqa.org/en/latest/technical_reference/extensions.html
load-plugins = [
  "pylint.extensions.emptystring",
  "pylint.extensions.confusing_elif",
  "pylint.extensions.consider_ternary_expression",
  "pylint.extensions.bad_builtin",
  "pylint.extensions.mccabe",
  "pylint.extensions.check_elif",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.empty_comment",
  "pylint.extensions.set_membership",
  "pylint.extensions.typing",
  # TODO: Maybe later
  # "pylint.extensions.docparams",
  # Not wanted/needed
  # "pylint.extensions.broad_try_clause",
  # "pylint.extensions.code_style",
  # "pylint.extensions.comparetozero",
  # "pylint.extensions.docstyle",
  # "pylint.extensions.while_used",
  # Didn't work
  # "pylint.extensions.comparison_placement",
  # "pylint.extensions.for_any_all",
]
ignore-paths = [
  # Auto generated
  "^src/gen/.*$",
  # We expect stub files to be incomplete or contain useless statements
  "^.*.pyi$",
]
extension-pkg-allow-list = ["PyQt6", "PySide6", "win32ui"]

[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint.DESIGN]
# Same as SonarLint
max-args = 7
# Arbitrary to 2 bytes
max-attributes = 15
max-locals = 15

[tool.pylint.'MESSAGES CONTROL']
# Same as SonarLint
max-complexity = 15
# At least same as max-complexity
max-branches = 15
# https://github.com/PyCQA/pep8-naming/issues/164
# OR doesn't fit CaptureMethodMeta
valid-classmethod-first-arg = "self"
# https://pylint.pycqa.org/en/latest/user_guide/options.html#naming-styles
module-naming-style = "any"
# Can't make private class with PascalCase
class-rgx = "_?_?[a-zA-Z]+?$"
good-names = [
  # PyQt methods
  "closeEvent", "paintEvent", "keyPressEvent", "mousePressEvent", "mouseMoveEvent", "mouseReleaseEvent",
  # https://github.com/PyCQA/pylint/issues/2018
  "id", "x", "y", "a0", "i", "t0", "t1"]
disable = [
  # No need to mention the fixmes
  "fixme",
  "missing-docstring",
  # Already taken care of and grayed out. Also conflicts with Pylance reportIncompatibleMethodOverride
  "unused-argument",
  # Already taken care of by Flake8 and isort
  "ungrouped-imports",
  "unused-import",
  "wrong-import-order",
  "wrong-import-position",
  # Only reports a single instance. Pyright does a better job anyway
  "cyclic-import",
  # Doesn't work with local imports
  "import-error",
  # Similar lines in 2 files, doesn't really work
  "R0801",
  # False positives with PyQt .connect
  "no-value-for-parameter",
  # Not as long as we support Python 3.9
  "consider-alternative-union-syntax",
]

[tool.pylint.TYPECHECK]
generated-members = [
  # https://github.com/PyCQA/pylint/issues/4987
  "cv2",
  # https://github.com/mhammond/pywin32/issues/1913
  "pywintypes.error",
]

[tool.isort]
line_length = 120
combine_as_imports = true
