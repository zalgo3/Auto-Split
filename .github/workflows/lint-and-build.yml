# https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions
name: Lint and build
on:
  workflow_dispatch: #  Allows manual builds
  push:
    branches:
      - main
      - master
    paths:
      - "**.py"
      - "**.pyi"
      - "**.ui"
  pull_request:
    branches:
      - main
      - master
      - dev
      - dev*
      - 2.0.0
    paths:
      - "**.py"
      - "**.pyi"
      - "**.ui"
jobs:
  Pyright:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # Pyright is version and platform sensible
      matrix:
        python-version: ["3.9", "3.10"]
        # FIXME: For some reasons, Pyright can't find imports on ubuntu CI
        os: [windows-latest, ubuntu-22.04]
        # os: [windows-latest]
    steps:
      - name: Checkout ${{ github.repository }}/${{ github.ref }}
        uses: actions/checkout@v3
      - name: Set up Node
        uses: actions/setup-node@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "scripts/requirements*.txt"
      - run: scripts/install.ps1
        shell: pwsh
      - name: Analysing the code with Pyright
        run: python -m pyright --warnings
  Pylint:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # Pylint is version and platform sensible
      matrix:
        python-version: ["3.9", "3.10"]
        os: [windows-latest, ubuntu-22.04]
    steps:
      - name: Checkout ${{ github.repository }}/${{ github.ref }}
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "scripts/requirements*.txt"
      - run: scripts/install.ps1
        shell: pwsh
      # FIXME: For some reasons, Pylint can't see PyQt6 modules on ubuntu
      - name: Analysing the code with Pylint (ubuntu)
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        run: pylint --reports=y --output-format=colorized --disable=no-name-in-module src/
      - name: Analysing the code with Pylint
        if: ${{ matrix.os != 'ubuntu-22.04' }}
        run: pylint --reports=y --output-format=colorized src/
  Flake8:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      # Flake8 is tied to the version of Python on which it runs. Platform checks are ignored
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
      - name: Checkout ${{ github.repository }}/${{ github.ref }}
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
          cache-dependency-path: "scripts/requirements*.txt"
      - run: scripts/install.ps1
        shell: pwsh
      - name: Analysing the code with Flake8
        run: flake8
  Bandit:
    # Bandit only matters on the version deployed. Platform checks are ignored
    runs-on: windows-latest
    steps:
      - name: Checkout ${{ github.repository }}/${{ github.ref }}
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
          cache-dependency-path: "scripts/requirements*.txt"
      - run: scripts/install.ps1
        shell: pwsh
      - name: Analysing the code with Bandit
        run: bandit -n 1 --severity-level medium --recursive src
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # Only the Python version we plan on shipping matters.
      matrix:
        python-version: ["3.10"]
        os: [windows-latest, ubuntu-22.04]
    steps:
      - name: Checkout ${{ github.repository }}/${{ github.ref }}
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - run: scripts/install.ps1
        shell: pwsh
      - run: scripts/build.ps1
        shell: pwsh
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: AutoSplit for ${{ matrix.os }} (Python ${{ matrix.python-version }})
          path: dist/AutoSplit*
          if-no-files-found: error
      - name: Upload Build logs
        uses: actions/upload-artifact@v3
        with:
          name: Build logs for ${{ matrix.os }} (Python ${{ matrix.python-version }})
          path: |
            build/AutoSplit/*.toc
            build/AutoSplit/*.txt
            build/AutoSplit/*.html
          if-no-files-found: error
